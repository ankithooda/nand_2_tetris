@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_0
D;JEQ
D=0
@JUMP_END_StackTest_JUMP_1
0;JMP
(SETTRUE_StackTest_JUMP_0)
D=-1
(JUMP_END_StackTest_JUMP_1)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@16
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_2
D;JEQ
D=0
@JUMP_END_StackTest_JUMP_3
0;JMP
(SETTRUE_StackTest_JUMP_2)
D=-1
(JUMP_END_StackTest_JUMP_3)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@16
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_4
D;JEQ
D=0
@JUMP_END_StackTest_JUMP_5
0;JMP
(SETTRUE_StackTest_JUMP_4)
D=-1
(JUMP_END_StackTest_JUMP_5)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@892
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_6
D;JLT
D=0
@JUMP_END_StackTest_JUMP_7
0;JMP
(SETTRUE_StackTest_JUMP_6)
D=-1
(JUMP_END_StackTest_JUMP_7)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@892
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_8
D;JLT
D=0
@JUMP_END_StackTest_JUMP_9
0;JMP
(SETTRUE_StackTest_JUMP_8)
D=-1
(JUMP_END_StackTest_JUMP_9)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_10
D;JLT
D=0
@JUMP_END_StackTest_JUMP_11
0;JMP
(SETTRUE_StackTest_JUMP_10)
D=-1
(JUMP_END_StackTest_JUMP_11)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32767
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_12
D;JGT
D=0
@JUMP_END_StackTest_JUMP_13
0;JMP
(SETTRUE_StackTest_JUMP_12)
D=-1
(JUMP_END_StackTest_JUMP_13)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32767
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_14
D;JGT
D=0
@JUMP_END_StackTest_JUMP_15
0;JMP
(SETTRUE_StackTest_JUMP_14)
D=-1
(JUMP_END_StackTest_JUMP_15)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_StackTest_JUMP_16
D;JGT
D=0
@JUMP_END_StackTest_JUMP_17
0;JMP
(SETTRUE_StackTest_JUMP_16)
D=-1
(JUMP_END_StackTest_JUMP_17)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@57
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@31
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@53
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND add
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M+D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@112
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND sub
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND neg
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
D=-D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND and
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M&D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
@82
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND or
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M|D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND not
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
D=!D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
