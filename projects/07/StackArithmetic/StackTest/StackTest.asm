// LOAD CONSTANT
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_0
D;JEQ
D=0
@JUMP_END_1
0;JMP
(SETTRUE_0)
D=-1
(JUMP_END_1)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@16
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_2
D;JEQ
D=0
@JUMP_END_3
0;JMP
(SETTRUE_2)
D=-1
(JUMP_END_3)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@16
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@17
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND eq
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_4
D;JEQ
D=0
@JUMP_END_5
0;JMP
(SETTRUE_4)
D=-1
(JUMP_END_5)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@892
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_6
D;JLT
D=0
@JUMP_END_7
0;JMP
(SETTRUE_6)
D=-1
(JUMP_END_7)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@892
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_8
D;JLT
D=0
@JUMP_END_9
0;JMP
(SETTRUE_8)
D=-1
(JUMP_END_9)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@891
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND lt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_10
D;JLT
D=0
@JUMP_END_11
0;JMP
(SETTRUE_10)
D=-1
(JUMP_END_11)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32767
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_12
D;JGT
D=0
@JUMP_END_13
0;JMP
(SETTRUE_12)
D=-1
(JUMP_END_13)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32767
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_14
D;JGT
D=0
@JUMP_END_15
0;JMP
(SETTRUE_14)
D=-1
(JUMP_END_15)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@32766
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND gt
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M-D
@SETTRUE_16
D;JGT
D=0
@JUMP_END_17
0;JMP
(SETTRUE_16)
D=-1
(JUMP_END_17)
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@57
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@31
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@53
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND add
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=D+M
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@112
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND sub
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=D-M
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND neg
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
D=-D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND and
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=D&M
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// LOAD CONSTANT
@82
D=A
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND or
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=D|M
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
// PROCESS COMMAND not
// POP FROM STACK
@SP
M=M-1
@SP
A=M
D=M
D=!D
// PUSH ON TO STACK
@SP
A=M
M=D
@SP
M=M+1
