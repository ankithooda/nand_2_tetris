// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstr);

    // cInstr is equal to instruction[15]
    Not(in=aInstr, out=cInstr);

    // Load bit for A register.
    // A gets loaded when instruction[15] is 1 or instruction[5] is 1    

    Or(a=aInstr, b=instruction[5], out=loadA);
    
    // A Register
    ARegister(in=inA, load=loadA, out=outA, out=pcA, out[0..14]=addressM);

    // Mux selecting between A-Instruction and C-Instruction
    Mux16(a=instruction, b=compALU, sel=cInstr, out=inA);

    // D Register
    // D Register loading is only done when it is C-Instruction
    // and instruction[4]
    And(a=cInstr, b=instruction[4], out=loadD);
    DRegister(in=compD, load=loadD, out=outD);

    // Mux selecting between A and M registers for ALU input
    // Selection only required if it is a CInstr
    And(a=cInstr, b=instruction[12], out=selAM);
    Mux16(a=outA, b=inM, sel=selAM, out=secondReg);

    // ALU
    ALU(x=outD,
        y=secondReg,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=compD,
        out=compALU,
        zr=zr,
        ng=ng
    );

    // Set writeM
    Not(in=instruction[3], out=flipline);
    Not(in=flipline, out=wM);

    // Set writeM only when it is a C-Instruction
    And(a=cInstr, b=wM, out=writeM);

    // Logic for jjj

    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);

    // JMP
    And(a=instruction[0], b=instruction[1], out=j1);
    And(a=j1, b=instruction[2], out=jmp);    

    // JGT
    And(a=nzr, b=nng, out=w1);
    And(a=w1, b=instruction[0], out=jgt, out=jgt1);

    // JEQ
    And(a=zr, b=instruction[1], out=jeq, out=jeq1, out=jeq2);

    // JGE
    Or(a=jgt1, b=jeq1, out=jge);

    // JLT
    And(a=ng, b=instruction[2], out=jlt, out=jlt1);

    // JLE
    Or(a=jeq2, b=jlt1, out=jle);

    // JNE
    And(a=instruction[0], b=instruction[2], out=checkjne);
    And(a=checkjne, b=nzr, out=jne);

    Or8Way(
        in[0]=false,
        in[1]=jmp,
        in[2]=jgt,
        in[3]=jeq,
        in[4]=jge,
        in[5]=jlt,
        in[6]=jne,
        in[7]=jle,
        out=jmpyes
    );

    // Jump is only valid when it is C-instruction
    // and some jmp condition is true.
    And(a=jmpyes, b=cInstr, out=jmpvalid);

    Not(in=jmpvalid, out=incyes);
    
    PC(in=pcA, load=jmpvalid, inc=incyes, reset=reset, out[0..14]=pc);
}